---
layout: post
title:  npm 如何解决依赖版本冲突
link:   npm-dependency-version-conflict
date:   2019-08-02 20:40:00 +0800
categories: npm
---

## 依赖地狱

早期版本的的 npm 管理模块依赖的方式并不复杂。为了能保证每个模块尽可能的可用，它读取每个模块的依赖列表，并下载匹配版本的依赖模块到该模块目录内的 `node_modules` 文件夹下；如果该依赖又依赖了其他的模块，会继续下载该依赖的依赖到该模块目录的 `node_modules` 文件夹下——如此递归执行下去，最终形成一颗庞大的依赖树。

可以想象，当项目规模达到一定程度时，这种方式会造成以下问题：

1. 依赖树的层级非常深。如果需要定位某依赖的依赖，很难找到该依赖的文件所在；
2. 不同的依赖树分支里，可能有大量实际上是同样版本的依赖；
3. 安装时额外下载或拷贝了大量重复的资源，并且实际上也占用了大量的硬盘空间资源等。
4. 安装速度慢，甚至因为目录层级太深导致文件路径太长，在 windows 系统下删除 `node_modules` 文件夹也可能失败！

`依赖地狱(Dependency Hell)`——那时的 npm 就是这样让人头疼。

## 尽可能的共享相同的依赖

## 无法共享的依赖

## 参考

- <https://npm.github.io/how-npm-works-docs/index.html>

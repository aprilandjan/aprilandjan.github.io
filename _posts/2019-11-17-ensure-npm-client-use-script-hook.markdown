---
layout: post
title:  使用钩子命令检查 npm 客户端
link:   ensure-npm-client-use-script-hook
date:   2019-11-17 20:20:00 +0800
categories: npm
---

使用 `npm` 安装依赖时，`npm` 会默认的查找该模块已发布的最新的稳定版本，并写入到项目的 `package.json` 文件中；另外，也会通过版本标注符 `^` 声明满足该版本约束（在当前主版本下大于或等于该版本号的所有版本）都是可接受的。

这种默认的行为带来了一些问题。例如，某项目的 `package.json` 有如下的依赖声明：

```json
{
  "dependency": {
    "react": "^15.4.3"
  }
}
```

当一个项目开发者克隆该项目并进行安装时，可能此时 `react` 的最新稳定版已经是 `v15.4.9` 了，因为它满足 `npm` 的 [semver](https://docs.npmjs.com/misc/semver) 规范，那么此人实际安装的版本就将会是 `v15.4.9`。

然而，项目可能要求必须要在版本 `v15.4.3` 时才完全和预期没有差异；同理，其他的模块依赖，以及依赖的依赖，都可能因为模块版本的变更出现差异。这种差异累积起来，甚至有可能会导致项目尽管安装完全正确，但是在新的环境中甚至无法顺利运行。毕竟在 `npm` 的生态里，模块彼此依赖，很难保证每个模块都能完全的遵循语意化版本，做到大版本号间的向下兼容。

## 版本锁文件

为了解决以上问题，`版本锁`文件应运而生了。它明确的声明了项目每个模块的实际使用版本、获取地址、依赖的依赖关系等，并且在下次安装时直接根据该版本锁文件去获取依赖及组织 `node_modules` 内的文件结构，既保证了项目在不同环境下依赖安装的一致性，又提高了安装速度。

如果使用 `yarn` 安装依赖，`yarn` 会生成 `yarn.lock` 文件作为其所识别的版本锁文件；而 `npm` 则使用 `package-lock.json` 作为版本锁文件。它们彼此格式和解析各不相同，无法互相识别、混用。

## npm 客户端的差异

---
layout: post
title:  6 - 序列帧:Sprite
date:   2016-09-20 15:30:00 +0800
categories: canvas
---

在 css transition 中, 可以定义 [transition-timing-function](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function) 使得变化的程度随着时间流逝有着不同的表现。
假如变化是匀速的, 称之为线性变化; 假如变化速度是随时间程度加工过的, 称之为缓动变化。

### 立即追随

在前一个例子的基础上, 达成这样一种效果, 让物体追随 cursor 位置。
最直接的, 监听 mousemove/touchmove 事件, 然后直接把显示对象移动到该位置。[演示](https://jsfiddle.net/aprilandjan/e4g9og1w/)
可以看到, 这样的体验比较差, 物体位置变化显得不连贯平滑。

### 缓动追随

已知物体位置(x, y), 想要到达的目标位置(tarX, tarY), 我们采用以下技巧更新坐标:
 
```javascript
var ease = 0.3
x += (tarX - x) * ease
y += (tarY - y) * ease
```

该方法首先是计算当前位置与目标位置的距离差, 然后仅把当前位置向目标位置靠近一定的比例(ease)。即:
假设物体位置(0, 0), 目标位置(100, 50), 靠近的比例是 0.3, 按照上面的流程:
第1帧 移动距离:(30, 15); 目前到达:(30, 15)
第2帧 移动距离:(21, 10.5); 目前到达:(51, 25.5)
第3帧 移动距离:(14.7, 7.35); 目前到达:(65.7, 32.85)
...
第12帧 移动距离:(0.5931980228999976, 0.2965990114499988); 目前到达:(98.6158712799, 49.30793563995)
第13帧 移动距离:(0.4152386160299983, 0.20761930801499914); 目前到达:(99.03110989593, 49.515554947965)
第14帧 移动距离:(0.2906670312209996, 0.1453335156104998); 目前到达:(99.321776927151, 49.6608884635755)
...

观察以上数据可以知道, 每一帧都让物体更接近于目标, 越接近目标, 移动的距离就越小。这样便实现了一种非线性的缓动效果(ease-out); 上面的 ease 也叫缓动系数

把这种追随的方式应用到上面的例子中: [演示](https://jsfiddle.net/aprilandjan/aemdc1dh/)

在使用的缓动系数为 0.1 的情况下, 按照此比例靠近目标, 只需经过43次迭代(43帧时长, 如果按照 requestAnimationFrame 的默认60FPS, 大约0.7秒), 即可到达逼近程度 99% 以上。
缓动系数越大, 就越快接近目标。如果把缓动系数设置为1, 那么就相当于上例的立即到达的效果; 如果设置为0, 那么就相当无法响应位置追随了。
通常在60FPS下的缓动系数设置不宜超过0.2, 否则太快了, 缓动效果显得不明显。

### 用比例来处理缓动
//Todo 